<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MSVC Compiler Prefined Macro -- 枚举(enum class)转字符串</title>
    <link href="/2023/01/23/CPP-Macro-Enum2String/"/>
    <url>/2023/01/23/CPP-Macro-Enum2String/</url>
    
    <content type="html"><![CDATA[<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><!--> block reference used head of paragragh, and can be nested.--><ul><li>Standard predefined identifier: 预定义标识符</li></ul><ul><li><code>__func__</code>: 返回所在函数闭包对应的函数名。本质上是常量字符数组，由编译器提供(ISO C99 &amp; ISO C++11)，格式: <code>const char __func__[]</code></li></ul><ul><li>Standard predefined macro：预定义宏<blockquote><p>MSVC supports the predefined preprocessor macros required by the ANSI&#x2F;ISO C99, C11, and C17 standards, and the ISO C++14, C++17, and C++20 standards. </p></blockquote><ul><li>可提供通用的辅助性信息<ul><li><code>__LINE__</code>: 提供当前函数所在的行号, 格式：数字</li><li><code>__FILE__</code>：当前函数所在的文件, 格式：字符串</li><li><code>__DATE__</code>：当前日期, 格式：<code>Jan 19 2023</code></li><li><code>__TIME__</code>：当前时间信息, 格式：<code>22:35:41</code></li></ul></li><li>提供具体到函数调用的信息。本文将利用 <code>__FUNCSIG__</code> 提供的信息, 模拟反射机制来将 enum 变量转为字符串 <ul><li><code>__FUNCTION__</code>: 提供所在闭包对应函数的函数名, 格式: 返回 <code>__func__</code> 的值</li><li><code>__FUNCDNAME__</code>: 提供函数修饰名, 格式: <code>?main@@YAHXZ</code> 或 <code>main</code> 或 <code>_main</code>（可理解为符号表中导出的符号）</li><li><code>__FUNCSIG__</code>: 提供函数的完整声明(同g++支持的宏:<code>__PRETTY_FUNCTION__</code>), 格式: <code>int __cdecl main(void)</code></li></ul></li></ul></li><li>编译方式：导出符号的修饰规则，会影响到部分预定义宏的返回结果<ul><li><code>extern &quot;C&quot;</code>: 不带修饰符. 此时，<code>__FUNCTION__</code> 与 <code>__FUNCDNAME__</code> 的值相同 </li><li>其他: 导出符号被修饰,如：<code>?main@@YAHXZ</code>, 可拆分为 <code>?</code> + <code>funcname</code> + <code>@@</code> + <code>参数表代号</code><ul><li>修饰符: 用于函数重载</li><li>代号：XDEFHIJKMN_NU, 比如：@@YAHXZ可拆分为<ul><li>@@YA:起始位置, 也有@@YG, @@YI</li><li>H: 返回类型为 <code>int</code></li><li>X: 参数列表为空, 即 <code>void</code></li><li>Z: 结束位置, 也有@Z</li></ul></li></ul></li></ul></li><li>调用约定:   <ul><li><code>_cdecl</code>: C Declaration 的缩写, 即采用 C 语言的声明方式（C缺省调用方式）  <ul><li>参数从右—&gt;左依次入栈</li><li>手动清栈，即由调用者来恢复堆栈</li></ul></li><li><code>_stdcall</code>: Standard Call 的缩写, 是 C++ 的标准调用方式. MSVC 宏有 <code>PASCAL</code>, <code>WINAPI</code>, <code>CALLBACK</code> <ul><li>参数从右—&gt;左依次入栈</li><li>自动清栈，即由被调用函数来恢复堆栈</li></ul></li><li><code>_fastcall</code><ul><li>参数借由CPU寄存器(ecx, edx)和堆栈来处理参数信息，从右—&gt;左依次入栈</li><li>自动清栈：同<code>_stdcall</code>, 减轻调用者负担</li></ul></li></ul></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>业务开发过程中，会遇到需要获取 <krd>Enum</krd> 的相关信息, 具体应用场景如下: </p><ul><li>配置信息: 枚举值本身在代码逻辑中用于归类； 枚举名在初始化阶段作为配置信息的索引</li><li>多语言：完整的枚举名列表用于前端UI展示；枚举值用于用户交互进行语言切换</li></ul><p>本文目标是模拟反射机制(c#, java)，获取对应枚举的相关信息. 由预备知识可知，<code>__FUNCSIG__</code> 可获取当前函数的完整声明信息(包括调用约定信息). 不由产生两个疑问：</p><ul><li><code>__FUNCSIG__</code> 是如何获得函数的完整声明？</li><li>函数的声明如何能获得任意类型的 <code>enum class</code> 的相关信息?</li></ul><p>好的问题远比答案重要，相信此时我们已经有了答案：在编译阶段，模板函数会对所有的枚举类型进行实例化. 而实例化过程中，传入的枚举类型及枚举值就是我们所需要的相关信息. 本文目标是提供操作枚举(&lt;255)的工具函数，如下：</p><ul><li><code>get_enum_name</code>: 通过枚举值，获取对应名称</li><li><code>get_all_enum_names</code>: 获取枚举类型中所有值对应的名称列表</li><li><del><code>get_enum_value</code>: 通过名称，获取对应枚举值</del></li><li><del><code>check_enum_valid</code>: 确认是否是有效的枚举(value or name)</del></li></ul><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><p>考虑到兼顾不同编译器的情况，需要对不同编译器提供的预定义宏进行适配. 个人比较喜欢 <code>__PRETTY_FUNCTION__</code>, 如下:   </p><ul><li><blockquote><p><a href="https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170">msvc</a>: <code>__FUNCSIG__</code> Defined as a string literal that contains the signature of the enclosing function.</p></blockquote></li><li><blockquote><p><a href="https://gcc.gnu.org/onlinedocs/gcc/Function-Names.html">gcc</a>: In C, <code>__PRETTY_FUNCTION__</code> is yet another name for <code>__func__</code>, except that at file scope (or, in C++, namespace scope), it evaluates to the string “top level”. In addition, in C++, <code>__PRETTY_FUNCTION__</code> contains the signature of the function as well as its bare name.</p></blockquote></li></ul><table style="margin-bottom: 8px;">    <tbody>        <tr style="border: none">            <td style="background: black; border: none; width: 100vw; border-radius: 4px">                <ol style="margin:0;">                    <li align="left"><b>                        <font size=2 color=silver>#if&ensp;!defined(</font><font size=2 color=peru>__PRETTY_FUNCTION__</font><font size=2 color=silver>)&ensp;&&&ensp;!defined(</font><font size=2 color=gainsboro>__GNUC__</font><font size=2 color=silver>)</font>                    </b></li>                    <li align="left"><b>                        <font size=2 color=silver>#&emsp;&emsp;define</font>                        <font size=2 color=mediumpurple>__PRETTY_FUNCTION__</font>                        <font size=2 color=peru>__FUNCSIG__</font>                    </b></li>                    <li align="left"><b>                        <font size=2 color=silver>#endif</font>                    </b></li>                </ol>            </td>        </tr>    </tbody></table>  <p>同时，提供工具函数用于遍历枚举类的所有枚举值：根据阈值 <code>boundary</code>, 生成枚举值所在范围列表 [-boundary, boundary)  </p><table style="margin-top: 8px">    <tbody>        <tr style="border: none">            <td style="background: black; border: none; width: 100vw; border-radius: 4px">                <ol style="margin:0;">                        <li align="left"><b>                        <font size=2 color=steelblue>template</font><font size=2 color=silver>&ensp;<</font><font size=2 color=steelblue>int</font><font size=2 color=silver>...</font><font size=2 color=gainsboro>&ensp;sequence</font><font size=2 color=silver>></font>                    </b></li>                    <li align="left"><b>                        <font size=2 color=steelblue>constexpr&ensp;auto</font><font size=2 color=lemonchiffon>&ensp;make_sequence_impl</font><font size=2 color=silver>(std::</font><font size=2 color=mediumseagreen>index_sequence</font><font size=2 color=silver><</font><font size=2 color=gainsboro>sequence</font><font size=2 color=silver>...>&ensp;seq)&ensp;{</font>                    </b></li>                    <li><b>                        <font size=2 color=mediumorchid>&emsp;&emsp;&ensp;return</font><font size=2 color=silver>&ensp;std::</font><font size=2 color=mediumseagreen>integer_sequence</font><font size=2 color=silver><</font><font size=2 color=steelblue>int</font><font size=2 color=silver>,&ensp;(</font><font size=2 color=gainsboro>&ensp;sequence&ensp;-</font><font size=2 color=silver>&ensp;seq.</font><font size=2 color=gainsboro>size</font><font size=2 color=silver>())...,</font><font size=2 color=gainsboro>&ensp;sequence</font><font size=2 color=silver>...>();</font>                    </b></li>                    <li align="left"><b>                        <font size=2 color=silver>}</font>                    </b></li>                                           <li align="left"><b>                        <font size=2 color=steelblue>template</font><font size=2 color=silver>&ensp;<</font><font size=2 color=steelblue>int</font><font size=2 color=gainsboro>&ensp;boundary</font><font size=2 color=silver>></font>                        <font size=2 color=silver>,</font><font size=2 color=steelblue>&ensp;typename</font><font size=2 color=mediumseagreen>&ensp;indices</font><font size=2 color=silver>&ensp;=&ensp;std::</font><font size=2 color=mediumseagreen>make_index_sequence</font><font size=2 color=silver><</font><font size=2 color=gainsboro>boundary</font><font size=2 color=silver>>></font>                    </b></li>                    <li align="left"><b>                        <font size=2 color=steelblue>constexpr&ensp;auto</font><font size=2 color=lemonchiffon>&ensp;make_sequence</font><font size=2 color=silver>()&ensp;{</font>                    </b></li>                    <li align="left"><b>                        <font size=2 color=mediumorchid>&emsp;&emsp;&ensp;return</font><font size=2 color=gainsboro>&ensp;make_sequence_impl</font><font size=2 color=silver>(</font><font size=2 color=mediumseagreen>indices</font><font size=2 color=silver>());</font>                    </b></li>                    <li align="left"><b>                        <font size=2 color=silver>}</font>                    </b></li>                </ol>            </td>        </tr>    </tbody></table>  <h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ul><li><code>get_enum_name</code>: 由于 <code>std::regex</code> 不支持 look behind, 此处藉由 <code>QRegualr</code> 实现对编译期常量<b><font color=gainsboro><code>V</code></font></b>和类型<b><font color=mediumseagreen><code>E</code></font></b>的捕获.</li></ul><table>    <tbody>        <tr style="border: none">            <td style="background: black; border: none; width: 100vw; border-radius: 4px">                <ol style="margin:0;">                    <li><b>                        <font size=2 color=steelblue>template</font><font size=2 color=silver>&ensp;<</font><font size=2 color=steelblue>typename</font><font size=2 color=MediumSeaGreen>&ensp;E</font><font size=2 color=silver>,</font><font size=2 color=MediumSeaGreen>&ensp;E</font><font size=2 color=gainsboro>&ensp;V</font><font size=2 color=silver>></font>                    </b></li>                    <li align="left"><b>                        <font size=2 color=steelblue>constexpr</font><font size=2 color=silver>&ensp;std::</font><font size=2 color=MediumSeaGreen>string</font><font size=2 color=LemonChiffon>&ensp;get_enum_name</font><font size=2 color=silver>()&ensp;{</font>                    </b></li>                    <b><li align="left">                        <font size=2 color=silver>&emsp;&emsp;&ensp;std::</font><font size=2 color=mediumseagreen>string</font><font size=2 color=skyblue>&ensp;name</font><font size=2 color=silver>(</font><font size=2 color=mediumpurple>__PRETTY_FUNCTION__</font><font size=2 color=silver>);</font>                    </b></li>                    <b><li align="left">                        <font size=2 color=mediumseagreen>&emsp;&emsp;&ensp;QRegularExpression</font><font size=2 color=skyblue>&ensp;reg</font><font size=2 color=silver>(</font><font size=2 color=peru>"(?<=::)[a-zA-Z_]+[</font><font size=2 color=navajowhite>\\</font><font size=2 color=peru>w]*(?=>)"</font><font size=2 color=silver>);</font>                    </b></li>                    <li><b>                        <font size=2 color=mediumseagreen>&emsp;&emsp;&ensp;QRegularExpressionMatch</font><font size=2 color=skyblue>&ensp;match</font><font size=2 color=silver>&ensp;=</font><font size=2 color=skyblue>&ensp;reg</font><font size=2 color=silver>.</font><font size=2 color=lemonchiffon>match</font><font size=2 color=silver>(</font><font size=2 color=skyblue>name</font><font size=2 color=silver>.</font><font size=2 color=lemonchiffon>c_str</font><font size=2 color=silver>());</font>                    </b></li>                    <li><b>                        <font size=2 color=mediumseagreen>&emsp;&emsp;&ensp;QString</font><font size=2 color=skyblue>&ensp;matched</font><font size=2 color=silver>&ensp;=</font><font size=2 color=lemonchiffon>&ensp;""</font><font size=2 color=silver>;</font>                    </b></li>                    <li><b>                        <font size=2 color=mediumorchid>&emsp;&emsp;&ensp;if</font>                        <font size=2 color=silver>(</font><font size=2 color=skyblue>match</font><font size=2 color=silver>.</font><font size=2 color=lemonchiffon>hasMatch</font><font size=2 color=silver>())&ensp;{</font>                    </b></li>                    <li><b>                        <font size=2 color=skyblue>&emsp;&emsp;&emsp;&emsp;matched</font><font size=2 color=silver>&ensp;=</font><font size=2 color=skyblue>&ensp;match</font><font size=2 color=silver>.</font><font size=2 color=lemonchiffon>captured</font><font size=2 color=silver>(</font><font size=2 color=powderblue>0</font><font size=2 color=silver>);</font>                    </b></li>                    <li><b>                        <font size=2 color=silver>&emsp;&emsp;&ensp;}</font>                    </b></li>                    <li><b>                        <font size=2 color=mediumorchid>&emsp;&emsp;&ensp;return</font><font size=2 color=skyblue>&ensp;matched</font><font size=2 color=silver>.</font><font size=2 color=lemonchiffon>size</font><font size=2 color=silver>()&ensp;></font><font size=2 color=powderblue>&ensp;0</font><font size=2 color=silver>&ensp;?</font><font size=2 color=skyblue>&ensp;matched</font><font size=2 color=silver>.</font><font size=2 color=lemonchiffon>toStdString</font><font size=2 color=silver>()&ensp;:</font><font size=2 color=burlywood>&ensp;""</font><font size=2 color=silver>;</font>                    </b></li>                    <li><b>                        <font size=2 colro=silver>}</font>                    </b></li>                </ol>            </td>        </tr>    </tbody></table>  <ul><li><code>get_all_enum_names</code>:</li></ul><table>    <tbody>        <tr style="border: none">            <td style="background: black; border: none; width: 100vw; border-radius: 4px">                <ol style="margin:0;">                    <li><b>                        <font size=2 color=steelblue>template</font><font size=2 color=silver>&ensp;<</font><font size=2 color=steelblue>typename</font><font size=2 color=mediumseagreen>&ensp;T</font><font size=2 color=silver>,</font><font size=2 color=steelblue>&ensp;int</font><font size=2 color=silver>...</font><font size=2 color=gainsboro>Ints</font><font size=2 color=silver>></font>                    </b></li>                    <li><b>                        <font size =2 color=steelblue>constexpr&ensp;auto</font><font size =2 color=lemonchiffon>&ensp;get_all_enum_names</font><font size =2 color=silver>(std::</font><font size =2 color=mediumseagreen>integer_sequence</font><font size =2 color=silver><</font><font size =2 color=steelblue>int</font><font size=2 color=silver>,</font><font size=2 color=gainsboro>&ensp;Ints</font><font size=2 color=silver>...>)&ensp;{</font>                    </b></li>                    <li><b>                        <font size=2 color=silver>&emsp;&emsp;&ensp;std::</font><font size=2 color=mediumseagreen>array</font><font size=2 color=silver><</font><font size=2 color=silver>std::</font><font size=2 color=mediumseagreen>string</font><font size=2 color=silver>,</font><font size=2 color=steelblue>&ensp;sizeof</font><font size=2 color=silver>...(</font><font size=2 color=gainsboro>Ints</font><font size=2 color=silver>)></font><font size=2 color=skyblue>&ensp;names</font><font size=2 color=silver>{</font><font size=2 color=gainsboro>&nbsp;get_enum_name</font><font size=2 color=silver><</font><font size=2 color=mediumseagreen>T</font><font size=2 color=silver>,</font><font size=2 color=steelblue>&ensp;static_cast</font><font size=2 color=silver><</font><font size=2 color=mediumseagreen>T</font><font size=2 color=silver>>(</font><font size=2 color=gainsboro>Ints</font><font size=2 color=silver>)>()...&nbsp;};</font>                    </b></li>                    <li><b>                        <font size=2 color=silver>&emsp;&emsp;&ensp;std::</font><font size=2 color=mediumseagreen>vector</font><font size=2 color=silver><</font><font size=2 color=silver>std::</font><font size=2 color=mediumseagreen>string</font><font size=2 color=silver>></font><font size=2 color=skyblue>&ensp;valid</font><font size=2 color=silver>{};</font>                    </b></li>                    <li><b>                        <font size=2 color=mediumorchid>&emsp;&emsp;&ensp;for</font><font size=2 color=silver>&ensp;(</font><font size=2 color=steelblue>auto const</font><font size=2 color=silver>&</font><font size=2 color=skyblue>&ensp;name</font><font size=2 color=silver>&ensp;:</font><font size=2 color=skyblue>&ensp;names</font><font size=2 color=silver>)&emsp;{</font>                    </b></li>                    <li><b>                        <font size=2 color=mediumorchid>&emsp;&emsp;&emsp;&emsp;&ensp;if</font><font size=2 color=silver>&ensp;(</font><font size=2 color=skyblue>name</font><font size=2 color=silver>.</font><font size=2 color=gainsboro>size</font><font size=2 color=silver>()&ensp;==</font><font size=2 color=powderblue>&ensp;0</font><font size=2 color=silver>)</font><font size=2 color=mediumorchid>&ensp;continue</font><font size=2 color=silver>;</font>                    </b></li>                     <li><b>                        <font size=2 color=skyblue>&emsp;&emsp;&emsp;&emsp;&ensp;valid</font><font size=2 color=silver>.</font><font size=2 color=gainsboro>push_back</font><font size=2 color=silver>(</font><font size=2 color=skyblue>name</font><font size=2 color=silver>);</font>                    </b></li>                                   <li><b>                        <font size=2 color=silver>&emsp;&emsp;&ensp;}</font>                    </b></li>                    <li><b>                        <font size=2 color=mediumorchid>&emsp;&emsp;&ensp;return</font><font size=2 color=skyblue>&ensp;valid</font><font size=2 color=silver>;</font>                    </b></li>                    <li><b>                         <font size=2 color=silver>}</font>                   </b></li>                </ol>            </td>        </tr>    </tbody></table>  ]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
